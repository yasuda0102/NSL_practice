declare adder32 {
    input a[32];  // 左項
    input b[32];  // 右項
    output c[32]; // 演算結果
    output carry; // キャリービット

    // 32bit整数同士を加算する関数
    func_in add(a, b) : c;
}

declare shifter32 {
    input inp[32];     // シフトしたい32bit値
    input num[6];      // 0～32bitまでのシフトに対応
    output result[32]; // 演算結果

    // inpをnumだけ論理左シフトする関数
    func_in shiftLeftL(inp, num) : result;

    // inpをnumだけ論理右シフトする関数
    func_in shiftRightL(inp, num) : result;

    // inpをnumだけ算術右シフトする関数
    func_in shiftRightA(inp, num) : result;
}

declare multiplier32 {
    input a[32];
    input b[32];
    output result[64];

    // 32bit整数同士を乗算して64bit整数値を返す関数
    func_in multiply(a, b) : result;
}

declare alu32 {
    input opcode[4];   // 0b0000: No Operation
                       // 0b0001: ADD
                       // 0b0010: SUB
                       // 0b0011: AND
                       // 0b0100: OR
                       // 0b0101: XOR
                       // その他: Reserved
    input opA[32];     // オペランドA
    input opB[32];     // オペランドB
    output result[32]; // 演算結果
    output status[4];  // 出力ステータス
                       // status[0]: キャリービット
                       // その他: Reserved
    
    // 命令を実行する関数
    func_in exec(opcode, opA, opB) : result;
}

declare comparator32 {
    input opcode[4];    // 0b0000: No Operation
                        // 0b0001: A == B
                        // 0b0010: A != B
                        // 0b0011: A < B (A, Bは符号付き整数)
                        // 0b1011: A < B (A, Bは符号なし整数)
                        // 0b0100: A >= B (A, Bは符号付き整数)
                        // 0b1100: A >= B (A, Bは符号なし整数)
    input opA[32];      // オペランドA
    input opB[32];      // オペランドB
    output result;      // 比較結果
                        // 0b0: False
                        // 0b1: True

    // 命令を実行する関数
    func_in exec(opcode, opA, opB) : result;
}

declare regfile {
    input raddrA[5];    // readするレジスタ番号A
    input raddrB[5];    // readするレジスタ番号B
                        // ※ 0を指定すると定数0x00000000を返す
    input waddr[5];     // writeするレジスタ番号
                        // ※ 0を指定すると無効
    input wdata[32];    // writeするデータ
    output rdataA[32];  // レジスタ番号Aのread結果
    output rdataB[32];  // レジスタ番号Bのread結果

    // 特定のレジスタに書き込む関数
    func_in write(waddr, wdata);

    // 2つのレジスタの値を読む関数
    func_in read(raddrA, raddrB);
}

declare dpram {
    input addr1[32];
    input addr2[32];
    input wdata1[32];
    input wdata2[32];
    output rdata1[32];
    output rdata2[32];
    input we1;
    input we2;
}

// opcodeの定義
#define LUI          0b0110111
#define AUIPC        0b0010111
#define JAL          0b1101111
#define JALR         0b1100111
#define BRANCH       0b1100011
#define LOAD         0b0000011
#define STORE        0b0100011
#define IARITHMETIC  0b0010011
#define ARITHMETIC   0b0110011
#define FENCE        0b0001111
#define SYSTEM       0b1110011

// CPUの制御信号の構造体
struct inst {
    ALU;
    SFT;
    CMP;
    LS;
    JMP;
    OP[4];
    R;
    I;
    S;
    B;
    U;
    J;
};

declare primitive_cpu {
    // デュアルポートメモリとのインタフェース
    output addr1[32];    // アドレス1
    output addr2[32];    // アドレス2
    output wdata[32];    // writeするデータ
    input rdata[32];     // readデータ

    // 特定のアドレスに4バイト書き込む関数
    func_out write(addr1, wdata);

    // 特定のアドレスから4バイト取得する関数
    func_out read(addr2) : rdata;
}