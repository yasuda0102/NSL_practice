declare adder32 {
    input a[32];  // 左項
    input b[32];  // 右項
    output c[32]; // 演算結果
    output carry; // キャリービット

    // 32bit整数同士を加算する関数
    func_in add(a, b) : c;
}

declare shifter {
    input inp[32];     // シフトしたい32bit値
    input num[6];      // 0～32bitまでのシフトに対応
    output result[32]; // 演算結果

    // inpをnumだけ論理左シフトする関数
    func_in shiftLeftL(inp, num) : result;

    // inpをnumだけ論理右シフトする関数
    func_in shiftRightL(inp, num) : result;

    // inpをnumだけ算術右シフトする関数
    func_in shiftRightA(inp, num) : result;
}

declare multiplier32 {
    input a[32];
    input b[32];
    output result[64];

    // 32bit整数同士を乗算して64bit整数値を返す関数
    func_in multiply(a, b) : result;
}

#define NOP 0b0000
#define ADD 0b0001
#define SUB 0b0010
#define AND 0b0011
#define OR  0b0100
#define XOR 0b0101

declare alu32 {
    input opcode[4];   // 0b0000: No Operation
                       // 0b0001: ADD
                       // 0b0010: SUB
                       // 0b0011: AND
                       // 0b0100: OR
                       // 0b0101: XOR
                       // その他: Reserved
    input opA[32];     // オペランドA
    input opB[32];     // オペランドB
    output result[32]; // 演算結果
    output status[4];  // 出力ステータス
                       // 0b0000: キャリービット
                       // その他: Reserved
    
    // 命令を実行する関数
    func_in exec(opcode, opA, opB) : result;
}

declare regfile {
    input raddrA[5];    // readするレジスタ番号A
    input raddrB[5];    // readするレジスタ番号B
                        // ※ 0を指定すると定数0x00000000を返す
    input waddr[5];     // writeするレジスタ番号
                        // ※ 0を指定すると無効
    input wdata[32];    // writeするデータ
    output rdataA[32];  // レジスタ番号Aのread結果
    output rdataB[32];  // レジスタ番号Bのread結果

    // 特定のレジスタに書き込む関数
    func_in write(waddr, wdata);

    // 2つのレジスタの値を読む関数
    func_in read(raddrA, raddrB);
}