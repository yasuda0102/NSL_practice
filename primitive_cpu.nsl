// Primitive 32bit CPU

#include "declaration.nsl"

module primitive_cpu {
    // プログラムカウンタ
    reg pc[32] = 0x00000000;

    // 取得命令列
    reg instr[32] = 0x00000000;

    // レジスタファイルからフェッチ
    reg ra[32] = 0x00000000;
    reg rb[32] = 0x00000000;
    reg rd[32] = 0x00000000;

    // レジスタ名
    reg rname_a[5] = 0b00000;
    reg rname_b[5] = 0b00000;
    reg rname_d[5] = 0b00000;

    // デコードした命令を格納
    // 0b000000: NOP
    // 0b000001: LUI
    // 0b000010: AUIPC
    // 0b000011: JAL
    // 0b000100: JALR
    // 0b000101: BEQ
    // 0b000110: BNE
    // 0b000111: BLT
    // 0b001000: BGE
    // 0b001001: BLTU
    // 0b001010: BGEU
    // 0b001011: LB
    // 0b001100: LH
    // 0b001101: LW
    // 0b001110: LBU
    // 0b001111: LHU
    // 0b010000: SB
    // 0b010001: SH
    // 0b010010: SW
    // 0b010011: ADDI
    // 0b010100: SLTI
    // 0b010101: SLTIU
    // 0b010110: XORI
    // 0b010111: ORI
    // 0b011000: ANDI
    // 0b011001: SLLI
    // 0b011010: SRLI
    // 0b011011: SRAI
    // 0b011100: ADD
    // 0b011101: SUB
    // 0b011110: SLL
    // 0b011111: SLT
    // 0b100000: SLTU
    // 0b100001: XOR
    // 0b100010: SRL
    // 0b100011: SRA
    // 0b100100: OR
    // 0b100101: AND
    // 0b100110: FENCE
    // 0b100111: ECALL
    // 0b101000: EBREAK
    reg inst[6] = 0b000000;

    // レジスタファイル
    regfile r32;

    // ALU
    alu32 a32;

    // シフタ
    // shifter32 s32;

    // 5段パイプラインを構成する
    // 命令フェッチ→命令デコード→レジスタフェッチ→実行→書き戻し
    proc_name fetch();
    proc_name decode(instr);
    proc_name register_fetch(rname_a, rname_b);
    proc_name execute(ra, rb);
    proc_name writeback(rd, pc);

    fetch();

    proc fetch {
        wire instrdata[32];
        
        instrdata = read(pc);
        decode(instrdata);
    }

    proc decode {
        wire opcode[7];
        wire funct3[3];
        // wire funct7[7];
        wire ra_w[5];
        wire rb_w[5];

        opcode = instr[6:0];
        funct3 = instr[14:12];
        // funct7 = instr[31:25];

        any {
            opcode == LUI: {
                inst := 0b000001;
                rname_d := instr[11:7];
                ra_w = 0b00000;
                rb_w = 0b00000;
            }

            opcode == AUIPC: {
                inst := 0b000010;
                rname_d := instr[11:7];
                ra_w = 0b00000;
                rb_w = 0b00000;
            }

            opcode == JAL: {
                inst := 0b000011;
                rname_d := instr[11:7];
                ra_w = 0b00000;
                rb_w = 0b00000;
            }

            opcode == JALR: {
                inst := 0b000100;
                rname_d := instr[11:7];
                ra_w = instr[19:15];
                rb_w = 0b00000;
            }

            opcode == CONDBRANCH: {
                ra_w = instr[19:15];
                rb_w = instr[24:20];

                any {
                    // BEQ
                    funct3 == 0b000:
                        inst := 0b000101;

                    // BNE
                    funct3 == 0b001:
                        inst := 0b000110;

                    // BLT
                    funct3 == 0b100:
                        inst := 0b000111;

                    // BGE
                    funct3 == 0b101:
                        inst := 0b001000;
                    
                    // BLTU
                    funct3 == 0b110:
                        inst := 0b001001;
                    
                    // BGEU
                    funct3 == 0b111:
                        inst := 0b001010;
                }
            }

            opcode == LOAD: {

            }

            opcode == STORE: {

            }

            opcode == IARITHMETIC: {

            }

            opcode == ARITHMETIC: {

            }

            opcode == FENCE: {

            }

            opcode == ECALL: {

            }

            opcode == EBREAK: {

            }
        }

        register_fetch(ra_w, rb_w);
    }

    proc register_fetch {
        wire a[32];
        wire b[32];

        r32.read(rname_a, rname_b);
        a = r32.rdataA;
        b = r32.rdataB;
        execute(a, b);
    }

    proc execute {
        write(0x00000000, 0x00000000);
        writeback(a32.exec(0b0001, ra, rb), pc + 4);
    }

    proc writeback {
        r32.write(rname_d, rd);
        finish();
    }
}