// Primitive 32bit CPU

#include "declaration.nsl"

module primitive_cpu {
    // プログラムカウンタ
    reg pc[32] = 0x00000000;

    // レジスタファイル
    regfile r32;

    // ALU
    alu32 a32;

    // シフタ
    shifter32 s32;

    // 5段パイプラインを構成する
    // 命令フェッチ→命令デコード→レジスタフェッチ→実行→書き戻し

    // 命令フェッチステージ
    proc_name fetch();

    // デコードステージ
    // 取得命令列
    reg instr[32] = 0x00000000;
    reg pc_de[32];
    proc_name decode(instr, pc_de);

    // レジスタフェッチステージ
    inst reg inst_rf;
    reg rname_a_rf[5];
    reg rname_b_rf[5];
    reg rname_d_rf[5];
    reg imm_rf[20];
    reg pc_rf[32];
    proc_name register_fetch(inst_rf, rname_a_rf, rname_b_rf, rname_d_rf, imm_rf, pc_rf);

    // 実行ステージ
    inst reg inst_ex;
    reg ra[32];
    reg rb[32];
    reg rname_d_ex[5];
    reg imm_ex[20];
    reg pc_ex[32];
    proc_name execute(inst_ex, ra, rb, rname_d_ex, imm_ex, pc_ex);

    // 書き戻しステージ
    reg rname_d_wb[5];
    reg rd[32];
    reg pc_wb[32];
    proc_name writeback(rname_d_wb, rd, pc_wb);

    // 実行ステージにおけるユニット群
    wire pc_i[32];
    wire a_i[32];
    wire b_i[32];
    wire imm_i[20];
    wire ret[65];                                       // retの意味付け
                                                        // ret[64]:    分岐・ジャンプフラグ
                                                        // ret[63:32]: 飛び先アドレス
                                                        // ret[31:0]:  演算結果
    func_self alu(pc_i, a_i, b_i, imm_i) : ret;
    func_self shift(pc_i, a_i, b_i, imm_i) : ret;
    func_self compare(pc_i, a_i, b_i, imm_i) : ret;
    func_self load_store(pc_i, a_i, b_i, imm_i) : ret;
    func_self jump(pc_i, a_i, b_i, imm_i) : ret;

    fetch();

    proc fetch {
        decode(read(pc), pc);
        pc := pc + 4;
    }

    proc decode {
        wire opcode[7];
        wire funct3[3];
        wire funct7[7];

        opcode = instr[6:0];
        funct3 = instr[14:12];
        funct7 = instr[31:25];

        any {
            opcode == LUI: 
                register_fetch(0b10000_0000_000010, 0b00000, 0b00000, instr[11:7], instr[31:12], pc_de);

            opcode == AUIPC: 
                register_fetch(0b00001_0000_000010, 0b00000, 0b00000, instr[11:7], instr[31:12], pc_de);

            opcode == JAL: 
                register_fetch(0b00001_0000_000001, 0b00000, 0b00000, instr[11:7], 
                               {instr[31], instr[19:12], instr[20], instr[30:21]}, pc_de);

            opcode == JALR: 
                register_fetch(0b00001_0000_010000, instr[19:15], 0b00000, instr[11:7], 20#(instr[31:20]), pc_de);

            opcode == BRANCH: {
                any {
                    // BEQ
                    funct3 == 0b000:
                        register_fetch(0b00001_0001_000100, instr[19:15], instr[24:20], 0b00000, 
                                       20#({instr[31], instr[7], instr[30:25], instr[11:8], 0b0}), pc_de);

                    // BNE
                    funct3 == 0b001:
                        register_fetch(0b00001_0010_000100, instr[19:15], instr[24:20], 0b00000, 
                                       20#({instr[31], instr[7], instr[30:25], instr[11:8], 0b0}), pc_de);

                    // BLT
                    funct3 == 0b100:
                        register_fetch(0b00001_0011_000100, instr[19:15], instr[24:20], 0b00000, 
                                       20#({instr[31], instr[7], instr[30:25], instr[11:8], 0b0}), pc_de);

                    // BGE
                    funct3 == 0b101:
                        register_fetch(0b00001_0100_000100, instr[19:15], instr[24:20], 0b00000, 
                                       20#({instr[31], instr[7], instr[30:25], instr[11:8], 0b0}), pc_de);
                    
                    // BLTU
                    funct3 == 0b110:
                        register_fetch(0b00001_1011_000100, instr[19:15], instr[24:20], 0b00000, 
                                       20'({instr[31], instr[7], instr[30:25], instr[11:8], 0b0}), pc_de);
                    
                    // BGEU
                    funct3 == 0b111:
                        register_fetch(0b00001_1100_000100, instr[19:15], instr[24:20], 0b00000, 
                                       20'({instr[31], instr[7], instr[30:25], instr[11:8], 0b0}), pc_de);
                }
            }

            opcode == LOAD: {
                any {
                    // LB
                    funct3 == 0b000: 
                        register_fetch(0b00010_0001_010000, instr[19:15], 0b00000, instr[11:7], 20#(instr[31:20]), pc_de);
                    
                    // LH
                    funct3 == 0b001: 
                        register_fetch(0b00010_0010_010000, instr[19:15], 0b00000, instr[11:7], 20#(instr[31:20]), pc_de);
                    
                    // LW
                    funct3 == 0b010:
                        register_fetch(0b00010_0100_010000, instr[19:15], 0b00000, instr[11:7], 20#(instr[31:20]), pc_de);
                    
                    // LBU
                    funct3 == 0b100: 
                        register_fetch(0b00010_1001_010000, instr[19:15], 0b00000, instr[11:7], 20'(instr[31:20]), pc_de);
                    
                    // LHU
                    funct3 == 0b101: 
                        register_fetch(0b00010_1010_010000, instr[19:15], 0b00000, instr[11:7], 20'(instr[31:20]), pc_de);
                }
            }

            opcode == STORE: {
                any {
                    // SB
                    funct3 == 0b000: 
                        register_fetch(0b00010_0001_001000, instr[19:15], instr[24:20], 0b00000, 
                                       20#({instr[21:25], instr[11:7]}), pc_de);

                    // SH
                    funct3 == 0b001: 
                        register_fetch(0b00010_0010_001000, instr[19:15], instr[24:20], 0b00000, 
                                       20#({instr[21:25], instr[11:7]}), pc_de);

                    // SW
                    funct3 == 0b010: 
                        register_fetch(0b00010_0100_001000, instr[19:15], instr[24:20], 0b00000, 
                                       20#({instr[21:25], instr[11:7]}), pc_de);
                }
            }

            opcode == IARITHMETIC: {
                any {
                    // ADDI
                    funct3 == 0b000: 
                        register_fetch(0b10000_0001_010000, instr[19:15], 0b00000, instr[11:7], 20#(instr[31:20]), pc_de);

                    // SLTI
                    funct3 == 0b010: 
                        register_fetch(0b00100_0011_010000, instr[19:15], 0b00000, instr[11:7], 20#(instr[31:20]), pc_de);

                    // SLTIU
                    funct3 == 0b011: 
                        register_fetch(0b00100_1011_010000, instr[19:15], 0b00000, instr[11:7], 20#(instr[31:20]), pc_de);

                    // XORI
                    funct3 == 0b100: 
                        register_fetch(0b10000_0101_010000, instr[19:15], 0b00000, instr[11:7], 20#(instr[31:20]), pc_de);

                    // ORI
                    funct3 == 0b110: 
                        register_fetch(0b10000_0100_010000, instr[19:15], 0b00000, instr[11:7], 20#(instr[31:20]), pc_de);

                    // ANDI
                    funct3 == 0b111: 
                        register_fetch(0b10000_0011_010000, instr[19:15], 0b00000, instr[11:7], 20#(instr[31:20]), pc_de);

                    // SLLI
                    funct3 == 0b001: 
                        register_fetch(0b01000_0001_010000, instr[19:15], 0b00000, instr[11:7], 20'(instr[24:20]), pc_de);

                    funct3 == 0b001: any {
                        // SRLI
                        funct7 == 0b0000000: 
                            register_fetch(0b01000_0010_010000, instr[19:15], 0b00000, instr[11:7], 20'(instr[24:20]), pc_de);

                        // SRAI
                        funct7 == 0b0100000: 
                            register_fetch(0b01000_1010_010000, instr[19:15], 0b00000, instr[11:7], 20'(instr[24:20]), pc_de);
                    }
                }
            }

            opcode == ARITHMETIC: {
                any {
                    funct3 == 0b000: any {
                        // ADD
                        funct7 == 0b0000000:
                            register_fetch(0b10000_0001_100000, instr[19:15], instr[24:20], instr[11:7], 0, pc_de);

                        // SUB
                        funct7 == 0b0100000:
                            register_fetch(0b10000_0010_100000, instr[19:15], instr[24:20], instr[11:7], 0, pc_de);
                    }

                    // SLL
                    funct3 == 0b001: 
                        register_fetch(0b01000_0001_100000, instr[19:15], instr[24:20], instr[11:7], 0, pc_de);

                    // SLT
                    funct3 == 0b010: 
                        register_fetch(0b00100_0011_100000, instr[19:15], instr[24:20], instr[11:7], 0, pc_de);

                    // SLTU
                    funct3 == 0b011: 
                        register_fetch(0b00100_1011_100000, instr[19:15], instr[24:20], instr[11:7], 0, pc_de);

                    // XOR
                    funct3 == 0b100: 
                        register_fetch(0b10000_0101_100000, instr[19:15], instr[24:20], instr[11:7], 0, pc_de);

                    funct3 == 0b101: any {
                        // SRL
                        funct7 == 0b0000000: 
                            register_fetch(0b01000_0010_100000, instr[19:15], instr[24:20], instr[11:7], 0, pc_de);
                        
                        // SRA
                        funct7 == 0b0100000: 
                            register_fetch(0b01000_1010_100000, instr[19:15], instr[24:20], instr[11:7], 0, pc_de);
                    }

                    // OR
                    funct3 == 0b110: 
                        register_fetch(0b10000_0100_100000, instr[19:15], instr[24:20], instr[11:7], 0, pc_de);

                    // AND
                    funct3 == 0b111: 
                        register_fetch(0b10000_0011_100000, instr[19:15], instr[24:20], instr[11:7], 0, pc_de);
                }
            }

            opcode == FENCE: 
                register_fetch(0b00000_0000_000000, instr[19:15], 0b00000, instr[11:7], 20'(instr[31:20]), pc_de);

            opcode == SYSTEM: any {
                // ECALL
                instr[31:20] == 0b000000000000: 
                    register_fetch(0b00000_0000_000000, 0b00000, 0b00000, 0b00000, 0, pc_de);

                // EBREAK
                instr[31:20] == 0b000000000001: 
                    register_fetch(0b00000_0000_000000, 0b00000, 0b00000, 0b00000, 0, pc_de);
            }
        }
    }

    proc register_fetch {
        r32.read(rname_a_rf, rname_b_rf);
        execute(inst_rf, r32.rdataA, r32.rdataB, rname_d_rf, imm_rf, pc_rf);
    }

    proc execute {
        wire unit_o[65];
        wire branch;
        wire jaddr[32];
        wire result[32];

        any {
            inst_ex.ALU: unit_o = alu();
            inst_ex.SFT: unit_o = shift();
            inst_ex.CMP: unit_o = compare();
            inst_ex.LS: unit_o = load_store();
            inst_ex.JMP: unit_o = jump();
        }
        branch = unit_o[64];
        jaddr = unit_o[63:32];
        result = unit_o[31:0];
        
        writeback(rname_d_ex, result, jaddr);
    }

    proc writeback {
        r32.write(rname_d_wb, rd);
        finish();
    }

    func alu {
        return 0;
    }

    func shift {
        return 0;
    }

    func compare {
        return 0;
    }

    func load_store {
        return 0;
    }

    func jump {
        return 0;
    }
}